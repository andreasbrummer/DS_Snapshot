Index: src/SnapshotLibrary/DistributedSnapshot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SnapshotLibrary;\n\nimport SnapshotLibrary.Messages.Marker;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.SocketAddress;\nimport java.nio.file.Path;\nimport java.util.*;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\n\n\n\n\n/*\n    * @author: Andreas Brummer\n    * @author: Francesco Caserta\n    * @date: 2023-03-16\n    * @version: 1.0\n    * @description: DistributedSnapshot class\n    * @note: This class is used to create a distributed snapshot of a distributed system.\n    * @note: The class is used to create a snapshot of the distributed system, and to store it in a file.\n    * @note: The class is also used to retrieve a snapshot from a file.\n    * @note: The class is also used to delete a snapshot from a file.\n    * @param: serverPortNumber: port number for the server\n    * @param: status: current status of the distributed system\n    * @param: server: server object\n    * @param: path: path to the directory where snapshots will be stored\n    * @param: input_nodes: list of SocketAddress of input nodes\n    * @param: snapshots: map of all snapshots currently in progress\n    * @param: output_nodes: map of all output nodes, using UUID as key and Socket object as value\n    * @param: output_stream: map of all output streams, using UUID as key and ObjectOutputStream object as value\n    * @param: SNAPSHOT_START_DELAY_MS: only for testing\n    * */\n\npublic class DistributedSnapshot{\n    private MessageListener listener;\n    private State status;\n    private Server server;\n    private final Path path;\n    private final List<SocketAddress> inputNodes = new ArrayList<>();\n    private final Map<UUID,Snapshot> snapshots = new HashMap<>();\n    private final Map<UUID,Socket> outputNodes = new HashMap<>();\n    private final Map<UUID,ObjectOutputStream> outputStream = new HashMap<>();\n    private static final Log LOGGER = LogFactory.getLog(DistributedSnapshot.class);\n\n    private final Object messageLock = new Object();\n\n\n    /*  only for testing\n        delay (in milliseconds) before a snapshot is started */\n    static final int SNAPSHOT_START_DELAY_MS = 5000;\n\n    /*  only for testing */\n    static final boolean TEST_MODE = true;\n    //TODO capire il discorso delle cartella e dei file (es. se cartella Ã¨ gia esistente)\n    public DistributedSnapshot(Path path) {\n        this.path = path;\n    }\n    public DistributedSnapshot(String folderName, MessageListener listener, State status) {\n        this.path = Storage.createFolder(folderName);\n        this.listener = listener;\n        this.status = status;\n    }\n    public DistributedSnapshot() {\n        this.path = Storage.createFolder(\"Snapshots\");\n    }\n    //TODO: pensare se mettere come argomento del costruttore anche lo status\n\n\n    public boolean init(int serverPortNumber) {\n            server = new Server();\n            server.start(serverPortNumber);\n            LOGGER.info(\"Server started.\");\n            return true;\n    }\n\n\n    public void end() throws IOException { // close server\n        server.stop();\n        LOGGER.info(\"Server stopped.\");\n    }\n\n    public String installNewConnectionToNode(InetAddress ip, int port) throws IOException {\n        Socket socket = new Socket(ip, port);\n        UUID id = UUID.randomUUID();\n        outputNodes.put(id, socket);\n        ObjectOutputStream objectOutput = new ObjectOutputStream(socket.getOutputStream());\n        outputStream.put(id, objectOutput);\n        return id.toString();\n    }\n\n    public void sendMessage(String node_id, Object msg) throws IOException {\n        outputStream.get(UUID.fromString(node_id)).writeObject(msg);\n    }\n\n    public UUID startSnapshot() throws IOException {\n        UUID snapshotId = UUID.randomUUID();\n        Marker marker = new Marker(snapshotId);\n        State stateToStore = status.copy(); // Copia lo stato di status in stateToStore (altrimenti finche non faccio lo store, se ricevo i messaggi viene modificato)\n        snapshots.put(marker.getSnapshotId(), new Snapshot(marker.getSnapshotId(), stateToStore ,new ArrayList<>(inputNodes)));\n        //LOGGER.info(\"Starting snapshot \" + input_nodes); //only for test\n\n        // send marker to all nodes\n        for (ObjectOutputStream objectOutput : outputStream.values()) {\n            objectOutput.writeObject(marker);\n        }\n        return snapshotId;\n    }\n\n    public void endSnapshot(Snapshot snapshot)  {\n        LOGGER.info(\"Snapshot \" + snapshot.getSnapshotId() + \" ended.\");\n        Storage.storeSnapshot(snapshot, path);\n        snapshots.remove(snapshot.getSnapshotId());\n        // test\n        if(TEST_MODE) {\n            LOGGER.debug(\"Printing snapshot... \" );\n            LOGGER.debug(snapshot.toString());\n        }\n\n\n    }\n\n    public void restoreSnapshot(UUID snapshotId) throws IOException, ClassNotFoundException, InterruptedException {\n        Snapshot snapshot = Storage.loadSnapshot(snapshotId, path);\n        if(snapshot != null) {\n            LOGGER.info(\"Restoring snapshot \" + snapshotId + \" ...\");\n            State new_state = snapshot.getStatus();\n            status.setState(new_state);\n            LOGGER.info(\"Restoring: State of the saved snapshot: \" + status.getState());\n            List<Pair<SocketAddress,Object>> nodeMessages = snapshot.getNodeMessages();\n            while(!snapshot.getNodeMessages().isEmpty()) {\n                Pair<SocketAddress, Object> pair = nodeMessages.remove(0);\n                listener.onMessageReceived(pair.getRight());\n            }\n            LOGGER.info(\"Restoring: State after the incoming messages in the snapshot: \" + status.getState());\n        }\n    }\n\n\n\n\n\n\n\n\n    private class Server {\n        private ServerSocket serverSocket;\n        private Thread serverThread;\n        private boolean running;\n\n        //controllare se public giusto\n        public void start(int portNumber) { //passare 0 per trovarne una libera\n            try {\n                serverSocket = new ServerSocket(portNumber);\n                int port = serverSocket.getLocalPort();\n                LOGGER.info(\"Server started on port\" + port);\n                running = true;\n                serverThread = new Thread(() -> {\n                    while (running) {\n                        try {\n                            Socket socket = serverSocket.accept();\n                            inputNodes.add(socket.getRemoteSocketAddress());\n                            // Gestisci la connessione del client qui:\n                            LOGGER.info(\"New connection established with:\" + socket.getInetAddress() + \" port:\" + socket.getPort());\n                            new Thread(new NodeHandler(socket)).start();\n\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                });\n                serverThread.start();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n\n        public void stop() throws IOException {\n            try {\n                running = false;\n                serverSocket.close();\n                serverThread.join();\n                LOGGER.info(\"Server stopped.\");\n            } catch (IOException e) {\n                if(!serverSocket.isClosed())\n                    serverSocket.close();\n                LOGGER.error(\"Error closing server socket\", e);\n            } catch (InterruptedException e) {\n                LOGGER.error(\"Interrupted while waiting for server thread to join\", e);\n                // Restore interrupted status\n                Thread.currentThread().interrupt();\n            }\n        }\n\n    }\n\n\n\n\n\n    private class NodeHandler implements Runnable {\n        private final Socket clientSocket;\n        public NodeHandler(Socket socket) {\n            this.clientSocket = socket;\n        }\n\n\n        /* @description: handleMarker method\n         * @note: This method is used to handle a marker message.\n         */\n\n        private void handleMarker(Marker marker) throws IOException, InterruptedException {\n            UUID snapshotId = marker.getSnapshotId();\n            Snapshot snapshot;\n\n            if (snapshots.containsKey(snapshotId)) {\n                // Case: snapshot in progress\n                snapshot = snapshots.get(snapshotId);\n            } else {\n                // Case: starting snapshot\n                LOGGER.info(\"Starting snapshot \" + snapshotId);\n                State stateToStore = status.copy(); // Copia lo stato di status in stateToStore (altrimenti finche non faccio lo store, se ricevo i messaggi viene modificato)\n                snapshot = new Snapshot(snapshotId, stateToStore, new ArrayList<>(inputNodes));\n\n                snapshots.put(snapshotId, snapshot);\n\n                // Forward marker to all other nodes in the network\n                if (TEST_MODE) {\n                    // Wait before starting the snapshot\n                    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\n                    executor.schedule(() -> {\n                        // Forward marker to all other nodes in the network\n                        outputNodes.forEach((k, v) -> {\n                            try {\n                                outputStream.get(k).writeObject(marker);\n                            } catch (IOException e) {\n                                e.printStackTrace();\n                            }\n                        });\n                    }, SNAPSHOT_START_DELAY_MS, TimeUnit.MILLISECONDS);\n                }\n                else {\n                    outputNodes.forEach((k, v) -> {\n                        try {\n                            outputStream.get(k).writeObject(marker);\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        }\n                    });\n                }\n            }\n            // If it was the last marker, end the snapshot\n            if (snapshot.removeFromNodeAddressList(clientSocket.getRemoteSocketAddress()))\n                endSnapshot(snapshot);\n        }\n\n\n\n\n        /* @description: handleMessage method\n         * @note: This method is used to handle a message.\n         */\n        private void handleMessage(Object message) {\n            if (snapshots.isEmpty()) {\n                // No snapshot in progress: do not save received messages\n                LOGGER.debug(\"Not saving received messages\");\n            } else {\n                // Snapshot in progress: save received messages\n                for (Snapshot snapshot : snapshots.values()) {\n                    LOGGER.debug(\"Saving received messages: \"+ message);\n                    //LOGGER.debug(snapshot.getConnectedNodes()); //only to test\n                    if (snapshot.getConnectedNodes().contains(clientSocket.getRemoteSocketAddress())) {\n                        snapshot.addNodeMessage(clientSocket.getRemoteSocketAddress(), message);\n                        LOGGER.debug(snapshot.getConnectedNodes().toString() + clientSocket.toString()+ message);\n                    }\n                }\n            }\n        }\n\n        @Override\n        public void run() {\n            try {\n                ObjectInputStream in = new ObjectInputStream(clientSocket.getInputStream());\n                //ObjectOutputStream out = new ObjectOutputStream(clientSocket.getOutputStream());\n                Object inputObject;\n                while ((inputObject = in.readObject()) != null) {\n                    synchronized(messageLock) {\n                        //listener.onMessageReceived(inputObject);\n                        /*Controllo se ho ricevuto un marker*/\n                        if (inputObject instanceof Marker) {\n                            LOGGER.debug(\"Received a new marker:\\n Id: \" + ((Marker) inputObject).getSnapshotId());\n                            handleMarker((Marker) inputObject);\n                        } else {\n                            LOGGER.debug(\"Received a new message: \" + inputObject);\n                            handleMessage(inputObject); //Perche lo avevi tolto?\n\n                            //testato che aspetta che la chiamata termini prima di andare avanti\n                            //in realta aspetta anche se non Ã¨ synchronize\n                            listener.onMessageReceived(inputObject);\n                            //LOGGER.debug(\"Eccomi sono fuori\"); //for test\n                        }\n                    }\n                }\n            } catch (IOException e) {\n                if (clientSocket.isClosed()) {\n                    // Socket closed by remote host\n                    LOGGER.error(\"Socket chiuso dal lato remoto.\");\n\n                    //TODO: togliere da input_nodes e chiudere questo thread.\n                } else {\n                    // Other I/O errors\n                    e.printStackTrace();\n                }\n            } catch (ClassNotFoundException e) {\n                e.printStackTrace();\n            }catch (InterruptedException e) {\n                throw new RuntimeException(e);\n            } finally {\n                // Socket closing\n                try {\n                    clientSocket.close(); //IN TEORIA NON DOBBIAMO CHIUDERE NOI IL SOCKET DEL CLIENT. DEVE CHIUDERLO IL CLIENT\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n            }\n        }\n    }\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/SnapshotLibrary/DistributedSnapshot.java b/src/SnapshotLibrary/DistributedSnapshot.java
--- a/src/SnapshotLibrary/DistributedSnapshot.java	(revision c3d0026f640098840afedf4b3d89181918cb05d1)
+++ b/src/SnapshotLibrary/DistributedSnapshot.java	(date 1683054868617)
@@ -2,19 +2,17 @@
 
 import SnapshotLibrary.Messages.Marker;
 
-import java.io.IOException;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
-import java.io.Serializable;
-import java.net.InetAddress;
-import java.net.ServerSocket;
-import java.net.Socket;
-import java.net.SocketAddress;
+import java.io.*;
+import java.net.*;
 import java.nio.file.Path;
 import java.util.*;
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.atomic.AtomicBoolean;
+
+
 
 import org.apache.commons.lang3.tuple.Pair;
 import org.apache.commons.logging.Log;
@@ -80,20 +78,21 @@
     //TODO: pensare se mettere come argomento del costruttore anche lo status
 
 
-    public boolean init(int serverPortNumber) {
+    public boolean init(int serverPortNumber) throws IOException {
             server = new Server();
             server.start(serverPortNumber);
             LOGGER.info("Server started.");
             return true;
     }
 
-
-    public void end() throws IOException { // close server
-        server.stop();
-        LOGGER.info("Server stopped.");
-    }
+    // close server
+        public void end() throws IOException {
+            server.stop();
+            LOGGER.info("Server stopped.");
+            closeAllConnections();
+        }
 
-    public String installNewConnectionToNode(InetAddress ip, int port) throws IOException {
+    public synchronized String installNewConnectionToNode(InetAddress ip, int port) throws IOException {
         Socket socket = new Socket(ip, port);
         UUID id = UUID.randomUUID();
         outputNodes.put(id, socket);
@@ -101,6 +100,38 @@
         outputStream.put(id, objectOutput);
         return id.toString();
     }
+    private void closeAllConnections() {
+        ExecutorService executor = Executors.newFixedThreadPool(outputNodes.size());
+
+        for (UUID id : outputNodes.keySet()) {
+            executor.execute(() -> {
+                try {
+                    Socket socket = outputNodes.get(id);
+                    ObjectOutputStream objectOutput = outputStream.get(id);
+
+                    objectOutput.close();
+                    socket.close();
+                    outputNodes.remove(id);
+                    outputStream.remove(id);
+
+                    LOGGER.info("Connection closed with: " + socket.getInetAddress() + " port: " + socket.getPort());
+                } catch (IOException e) {
+                    LOGGER.error("Error closing connection with id: " + id, e);
+                }
+            });
+        }
+
+        executor.shutdown();
+        try {
+            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
+            LOGGER.info("All connections closed.");
+        } catch (InterruptedException e) {
+            LOGGER.error("Interrupted while waiting for connection closing threads to finish", e);
+            // Restore interrupted status
+            Thread.currentThread().interrupt();
+        }
+    }
+
 
     public void sendMessage(String node_id, Object msg) throws IOException {
         outputStream.get(UUID.fromString(node_id)).writeObject(msg);
@@ -155,57 +186,70 @@
 
 
 
-
-    private class Server {
-        private ServerSocket serverSocket;
-        private Thread serverThread;
-        private boolean running;
-
-        //controllare se public giusto
-        public void start(int portNumber) { //passare 0 per trovarne una libera
-            try {
-                serverSocket = new ServerSocket(portNumber);
-                int port = serverSocket.getLocalPort();
-                LOGGER.info("Server started on port" + port);
-                running = true;
-                serverThread = new Thread(() -> {
-                    while (running) {
-                        try {
-                            Socket socket = serverSocket.accept();
-                            inputNodes.add(socket.getRemoteSocketAddress());
-                            // Gestisci la connessione del client qui:
-                            LOGGER.info("New connection established with:" + socket.getInetAddress() + " port:" + socket.getPort());
-                            new Thread(new NodeHandler(socket)).start();
-
-                        } catch (IOException e) {
-                            e.printStackTrace();
-                        }
-                    }
-                });
-                serverThread.start();
-            } catch (IOException e) {
-                e.printStackTrace();
-            }
-        }
+ private class Server {
+     private ServerSocket serverSocket;
+     private Thread serverThread;
+     private AtomicBoolean running = new AtomicBoolean(false);
+     List<Thread> nodeHandlerThreads = new ArrayList<>();
+     public void start(int portNumber) throws IOException {
+         if (running.get()) {
+             LOGGER.warn("Server is already running.");
+             return;
+         }
+         serverSocket = new ServerSocket(portNumber);
+         int port = serverSocket.getLocalPort();
+         LOGGER.info("Server started on port " + port);
+         running.set(true);
+         serverThread = new Thread(() -> {
+             while (running.get()) {
+                 try {
+                     Socket socket = serverSocket.accept();
+                     inputNodes.add(socket.getRemoteSocketAddress());
+                     LOGGER.info("New connection established with: " + socket.getInetAddress() + " port:" + socket.getPort());
+                     Thread nodeHandlerThread = new Thread(new NodeHandler(socket), "NodeHandler"+Thread.activeCount());
+                     nodeHandlerThreads.add(nodeHandlerThread);
+                     nodeHandlerThread.start();
+                 } catch (SocketException e) {
+                     if (running.get()) {
+                         LOGGER.error("Error accepting client connection.", e);
+                     }
+                 } catch (IOException e) {
+                     LOGGER.error("Error accepting client connection.", e);
+                 }
+             }
+         });
+         serverThread.start();
+     }
 
-        public void stop() throws IOException {
-            try {
-                running = false;
-                serverSocket.close();
-                serverThread.join();
-                LOGGER.info("Server stopped.");
-            } catch (IOException e) {
-                if(!serverSocket.isClosed())
-                    serverSocket.close();
-                LOGGER.error("Error closing server socket", e);
-            } catch (InterruptedException e) {
-                LOGGER.error("Interrupted while waiting for server thread to join", e);
-                // Restore interrupted status
-                Thread.currentThread().interrupt();
-            }
-        }
+     public void stop() {
+         if (!running.get()) {
+             LOGGER.warn("Server is not running.");
+             return;
+         }
+         running.set(false);
+         try {
+             serverSocket.close();
+             serverThread.interrupt();
+             for (Thread nodeHandlerThread : nodeHandlerThreads) {
+                 nodeHandlerThread.interrupt();
+                 nodeHandlerThread.join();
+             }
+             serverThread.join();
+             LOGGER.info("Server stopped.");
+         } catch (IOException | InterruptedException e) {
+             LOGGER.error("Error stopping server.", e);
+         }
+
+     }
+
+     public boolean isRunning() {
+         return running.get();
+     }
 
-    }
+     public int getPort() {
+         return serverSocket.getLocalPort();
+     }
+ }
 
 
 
@@ -296,34 +340,39 @@
                 ObjectInputStream in = new ObjectInputStream(clientSocket.getInputStream());
                 //ObjectOutputStream out = new ObjectOutputStream(clientSocket.getOutputStream());
                 Object inputObject;
-                while ((inputObject = in.readObject()) != null) {
-                    synchronized(messageLock) {
-                        //listener.onMessageReceived(inputObject);
-                        /*Controllo se ho ricevuto un marker*/
-                        if (inputObject instanceof Marker) {
-                            LOGGER.debug("Received a new marker:\n Id: " + ((Marker) inputObject).getSnapshotId());
-                            handleMarker((Marker) inputObject);
-                        } else {
-                            LOGGER.debug("Received a new message: " + inputObject);
-                            handleMessage(inputObject); //Perche lo avevi tolto?
+                    while ((inputObject = in.readObject()) != null && !Thread.currentThread().isInterrupted()) {
+                        synchronized(messageLock) {
+                            //listener.onMessageReceived(inputObject);
+                            /*Controllo se ho ricevuto un marker*/
+                            if (inputObject instanceof Marker) {
+                                LOGGER.debug("Received a new marker:\n Id: " + ((Marker) inputObject).getSnapshotId());
+                                handleMarker((Marker) inputObject);
+                            } else {
+                                LOGGER.debug("Received a new message: " + inputObject);
+                                handleMessage(inputObject); //Perche lo avevi tolto?
 
-                            //testato che aspetta che la chiamata termini prima di andare avanti
-                            //in realta aspetta anche se non Ã¨ synchronize
-                            listener.onMessageReceived(inputObject);
-                            //LOGGER.debug("Eccomi sono fuori"); //for test
+                                //testato che aspetta che la chiamata termini prima di andare avanti
+                                //in realta aspetta anche se non Ã¨ synchronize
+                                listener.onMessageReceived(inputObject);
+                                //LOGGER.debug("Eccomi sono fuori"); //for test
+                            }
                         }
                     }
+            } catch (EOFException e) {
+                // Client closed connection
+                LOGGER.info("Client closed connection: " + clientSocket.getRemoteSocketAddress());
+                // Remove client from input nodes
+                inputNodes.remove(clientSocket.getRemoteSocketAddress());
+                // Close socket
+                try {
+                    clientSocket.close();
+                } catch (IOException ex) {
+                    throw new RuntimeException(ex);
                 }
-            } catch (IOException e) {
-                if (clientSocket.isClosed()) {
-                    // Socket closed by remote host
-                    LOGGER.error("Socket chiuso dal lato remoto.");
-
-                    //TODO: togliere da input_nodes e chiudere questo thread.
-                } else {
-                    // Other I/O errors
-                    e.printStackTrace();
-                }
+            }
+            catch (IOException e) {
+                // Other I/O errors
+                e.printStackTrace();
             } catch (ClassNotFoundException e) {
                 e.printStackTrace();
             }catch (InterruptedException e) {
Index: DS_Snapshot.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule=\"true\" type=\"JAVA_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\" LANGUAGE_LEVEL=\"JDK_17\">\n    <output url=\"file://$MODULE_DIR$/target/classes\" />\n    <output-test url=\"file://$MODULE_DIR$/target/test-classes\" />\n    <content url=\"file://$MODULE_DIR$\">\n      <sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/target\" />\n    </content>\n    <orderEntry type=\"inheritedJdk\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.junit.jupiter:junit-jupiter-api:5.9.0-M1\" level=\"project\" />\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.opentest4j:opentest4j:1.2.0\" level=\"project\" />\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.junit.platform:junit-platform-commons:1.9.0-M1\" level=\"project\" />\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.apiguardian:apiguardian-api:1.1.2\" level=\"project\" />\n    <orderEntry type=\"library\" name=\"Maven: org.apache.commons:commons-lang3:3.12.0\" level=\"project\" />\n    <orderEntry type=\"library\" name=\"Maven: org.checkerframework:checker-qual:3.5.0\" level=\"project\" />\n    <orderEntry type=\"library\" name=\"Maven: org.glassfish.jersey.core:jersey-common:2.34\" level=\"project\" />\n    <orderEntry type=\"library\" name=\"Maven: jakarta.ws.rs:jakarta.ws.rs-api:2.1.6\" level=\"project\" />\n    <orderEntry type=\"library\" name=\"Maven: jakarta.annotation:jakarta.annotation-api:1.3.5\" level=\"project\" />\n    <orderEntry type=\"library\" name=\"Maven: org.glassfish.hk2.external:jakarta.inject:2.6.1\" level=\"project\" />\n    <orderEntry type=\"library\" name=\"Maven: org.glassfish.hk2:osgi-resource-locator:1.0.3\" level=\"project\" />\n    <orderEntry type=\"library\" name=\"Maven: org.slf4j:slf4j-api:1.7.33\" level=\"project\" />\n    <orderEntry type=\"library\" name=\"Maven: org.slf4j:slf4j-simple:2.0.0-alpha1\" level=\"project\" />\n    <orderEntry type=\"library\" name=\"Maven: org.slf4j:slf4j-log4j12:1.8.0-beta4\" level=\"project\" />\n    <orderEntry type=\"library\" name=\"Maven: log4j:log4j:1.2.17\" level=\"project\" />\n    <orderEntry type=\"library\" name=\"Maven: commons-logging:commons-logging:1.1.3\" level=\"project\" />\n    <orderEntry type=\"library\" name=\"Maven: org.apache.commons:commons-collections4:4.4\" level=\"project\" />\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DS_Snapshot.iml b/DS_Snapshot.iml
--- a/DS_Snapshot.iml	(revision c3d0026f640098840afedf4b3d89181918cb05d1)
+++ b/DS_Snapshot.iml	(date 1683054868989)
@@ -4,7 +4,14 @@
     <output url="file://$MODULE_DIR$/target/classes" />
     <output-test url="file://$MODULE_DIR$/target/test-classes" />
     <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test/resources" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/target/generated-sources/annotations" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/target/generated-test-sources/test-annotations" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+      <excludeFolder url="file://$MODULE_DIR$/target" />
       <excludeFolder url="file://$MODULE_DIR$/target" />
     </content>
     <orderEntry type="inheritedJdk" />
