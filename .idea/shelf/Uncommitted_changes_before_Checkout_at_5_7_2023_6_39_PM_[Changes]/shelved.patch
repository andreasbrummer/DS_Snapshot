Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"b20208bd-06e1-44f6-9d53-78bb3d314151\" name=\"Changes\" comment=\"SenderMessageTest upgrade\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/inspectionProfiles/Project_Default.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/inspectionProfiles/Project_Default.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/SenderMessageTest.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/SenderMessageTest.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/SnapshotLibrary/DistributedSnapshot.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/SnapshotLibrary/DistributedSnapshot.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/SnapshotLibrary/Storage.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/SnapshotLibrary/Storage.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/SnapshotLibrary/DistributedSnapshot$NodeHandler.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/SnapshotLibrary/DistributedSnapshot$NodeHandler.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/SnapshotLibrary/DistributedSnapshot$Server.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/SnapshotLibrary/DistributedSnapshot$Server.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/SnapshotLibrary/DistributedSnapshot.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/SnapshotLibrary/DistributedSnapshot.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/SnapshotLibrary/Storage.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/SnapshotLibrary/Storage.class\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Tag Library Descriptor\" />\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">\r\n    <option name=\"selectedUrlAndAccountId\">\r\n      <UrlAndAccount>\r\n        <option name=\"accountId\" value=\"8f50a126-4f1b-4332-af79-dfab72d0446c\" />\r\n        <option name=\"url\" value=\"https://github.com/andreasbrummer/DS_Snapshot.git\" />\r\n      </UrlAndAccount>\r\n    </option>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"useMavenConfig\" value=\"true\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2Mv7TxseNnSRH2Fi9zPz0pHUdhy\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"TODO_SCOPE\": \"All Places\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"codeWithMe.voiceChat.enabledByDefault\": \"false\",\r\n    \"extract.method.default.visibility\": \"private\",\r\n    \"last_opened_file_path\": \"/home/andreas/Desktop/DS/Prova\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"project.structure.last.edited\": \"Modules\",\r\n    \"project.structure.proportion\": \"0.15\",\r\n    \"project.structure.side.proportion\": \"0.2\",\r\n    \"settings.editor.selected.configurable\": \"editor.preferences.completion\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"$PROJECT_DIR$\" />\r\n      <recent name=\"$PROJECT_DIR$/src\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"$PROJECT_DIR$/src\" />\r\n      <recent name=\"$PROJECT_DIR$/src/SnapshotLibrary\" />\r\n      <recent name=\"$PROJECT_DIR$\" />\r\n    </key>\r\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\r\n      <recent name=\"\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.App2\">\r\n    <configuration name=\"App1\" type=\"Application\" factoryName=\"Application\" singleton=\"false\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"SenderMessageTest\" />\r\n      <module name=\"DS_Snapshot\" />\r\n      <option name=\"PROGRAM_PARAMETERS\" value=\"0\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/../../Prova\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"App2\" type=\"Application\" factoryName=\"Application\" singleton=\"false\" show_console_on_std_out=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"SenderMessageTest\" />\r\n      <module name=\"DS_Snapshot\" />\r\n      <option name=\"PROGRAM_PARAMETERS\" value=\"1\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/../../Prova\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Prova2\" type=\"Application\" factoryName=\"Application\" folderName=\"New Folder\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"SenderMessageTest\" />\r\n      <module name=\"DS_Snapshot\" />\r\n      <option name=\"PROGRAM_PARAMETERS\" value=\"1\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Application.Prova2\" />\r\n      <item itemvalue=\"Application.App1\" />\r\n      <item itemvalue=\"Application.App2\" />\r\n    </list>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"b20208bd-06e1-44f6-9d53-78bb3d314151\" name=\"Changes\" comment=\"\" />\r\n      <created>1678636215082</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1678636215082</updated>\r\n      <workItem from=\"1678636216222\" duration=\"16951000\" />\r\n      <workItem from=\"1678654071753\" duration=\"1690000\" />\r\n      <workItem from=\"1678866415385\" duration=\"466000\" />\r\n      <workItem from=\"1678901562944\" duration=\"8759000\" />\r\n      <workItem from=\"1679666526397\" duration=\"1155000\" />\r\n      <workItem from=\"1679668780782\" duration=\"11814000\" />\r\n      <workItem from=\"1679681867979\" duration=\"49000\" />\r\n      <workItem from=\"1682607024585\" duration=\"5107000\" />\r\n      <workItem from=\"1683020446344\" duration=\"12105000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"First commit\">\r\n      <created>1678636834719</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678636834719</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Aggiunto pom.xml\">\r\n      <created>1678637913171</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678637913171</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"aggiunta la logica\">\r\n      <created>1678643342346</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678643342347</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"aggiunta la logica\">\r\n      <created>1678648250873</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678648250873</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"modificato il main\">\r\n      <created>1678650189328</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678650189328</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"aggiunto startSnapshot\">\r\n      <created>1678652577369</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678652577369</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Uno snapshot funziona\">\r\n      <created>1678653689540</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678653689540</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Improved testing, added multisnapshot and improved the code\">\r\n      <created>1678993163641</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678993163641</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"MyListener&#10;MyState &#10;added\">\r\n      <created>1679043804378</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679043804378</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"MyListener&#10;MyState &#10;added\">\r\n      <created>1679680760833</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679680760833</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Connections problems fixed\">\r\n      <created>1683064955651</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1683064955651</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"code refactor in SenderMessageTest\">\r\n      <created>1683107152210</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1683107152210</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"now the NodeHandler waits for a new object for five seconds\">\r\n      <created>1683122331147</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1683122331147</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"now the NodeHandler waits for a new object for five seconds\">\r\n      <created>1683137259279</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1683137259279</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"SenderMessageTest upgrade\">\r\n      <created>1683201616717</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1683201616717</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"16\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"RECENT_FILTERS\">\r\n      <map>\r\n        <entry key=\"Branch\">\r\n          <value>\r\n            <list>\r\n              <RecentGroup>\r\n                <option name=\"FILTER_VALUES\">\r\n                  <option value=\"master\" />\r\n                </option>\r\n              </RecentGroup>\r\n            </list>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"CUSTOM_BOOLEAN_PROPERTIES\">\r\n                <map>\r\n                  <entry key=\"Show.Git.Branches\" value=\"true\" />\r\n                </map>\r\n              </option>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"origin/MultiSnapShot-withLISTENER\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"First commit\" />\r\n    <MESSAGE value=\"Aggiunto pom.xml\" />\r\n    <MESSAGE value=\"implementata la logica\" />\r\n    <MESSAGE value=\"aggiunta la logica\" />\r\n    <MESSAGE value=\"modificato il main\" />\r\n    <MESSAGE value=\"aggiunto startSnapshot\" />\r\n    <MESSAGE value=\"Uno snapshot funziona\" />\r\n    <MESSAGE value=\"Improved testing, added multisnapshot and improved the code\" />\r\n    <MESSAGE value=\"MyListener&#10;MyState &#10;added\" />\r\n    <MESSAGE value=\"Connections problems fixed\" />\r\n    <MESSAGE value=\"code refactor in SenderMessageTest\" />\r\n    <MESSAGE value=\"now the NodeHandler waits for a new object for five seconds\" />\r\n    <MESSAGE value=\"SenderMessageTest upgrade\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"SenderMessageTest upgrade\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <breakpoint enabled=\"true\" type=\"java-exception\">\r\n          <properties class=\"java.net.SocketException\" package=\"java.net\" />\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 83b590faeb6c8082017b643614ca6e4fc0989870)
+++ b/.idea/workspace.xml	(date 1683477438923)
@@ -4,16 +4,12 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="b20208bd-06e1-44f6-9d53-78bb3d314151" name="Changes" comment="SenderMessageTest upgrade">
-      <change beforePath="$PROJECT_DIR$/.idea/inspectionProfiles/Project_Default.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/inspectionProfiles/Project_Default.xml" afterDir="false" />
+    <list default="true" id="d4c9b499-1f7b-40df-bc09-5f26df90958d" name="Changes" comment="MyListener&#10;MyState &#10;added">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/SenderMessageTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/SenderMessageTest.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/SnapshotLibrary/DistributedSnapshot.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/SnapshotLibrary/DistributedSnapshot.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/SnapshotLibrary/Storage.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/SnapshotLibrary/Storage.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/classes/SnapshotLibrary/DistributedSnapshot$NodeHandler.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/SnapshotLibrary/DistributedSnapshot$NodeHandler.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/classes/SnapshotLibrary/DistributedSnapshot$Server.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/SnapshotLibrary/DistributedSnapshot$Server.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/classes/SnapshotLibrary/DistributedSnapshot.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/SnapshotLibrary/DistributedSnapshot.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/SnapshotLibrary/Storage.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/SnapshotLibrary/Storage.class" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -69,28 +65,28 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "TODO_SCOPE": "All Places",
-    "WebServerToolWindowFactoryState": "false",
-    "codeWithMe.voiceChat.enabledByDefault": "false",
-    "extract.method.default.visibility": "private",
-    "last_opened_file_path": "/home/andreas/Desktop/DS/Prova",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "project.structure.last.edited": "Modules",
-    "project.structure.proportion": "0.15",
-    "project.structure.side.proportion": "0.2",
-    "settings.editor.selected.configurable": "editor.preferences.completion",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
+    &quot;TODO_SCOPE&quot;: &quot;All Places&quot;,
+    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
+    &quot;codeWithMe.voiceChat.enabledByDefault&quot;: &quot;false&quot;,
+    &quot;extract.method.default.visibility&quot;: &quot;private&quot;,
+    &quot;last_opened_file_path&quot;: &quot;/home/andreas/Desktop/DS/Prova&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
+    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
+    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;editor.preferences.completion&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
       <recent name="$PROJECT_DIR$" />
@@ -110,7 +106,7 @@
       <option name="MAIN_CLASS_NAME" value="SenderMessageTest" />
       <module name="DS_Snapshot" />
       <option name="PROGRAM_PARAMETERS" value="0" />
-      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/../../Prova" />
+      <option name="WORKING_DIRECTORY" value="$USER_HOME$/Prova" />
       <method v="2">
         <option name="Make" enabled="true" />
       </method>
@@ -119,7 +115,7 @@
       <option name="MAIN_CLASS_NAME" value="SenderMessageTest" />
       <module name="DS_Snapshot" />
       <option name="PROGRAM_PARAMETERS" value="1" />
-      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/../../Prova" />
+      <option name="WORKING_DIRECTORY" value="$USER_HOME$/Prova" />
       <method v="2" />
     </configuration>
     <configuration name="Prova2" type="Application" factoryName="Application" folderName="New Folder">
@@ -139,7 +135,7 @@
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
-      <changelist id="b20208bd-06e1-44f6-9d53-78bb3d314151" name="Changes" comment="" />
+      <changelist id="d4c9b499-1f7b-40df-bc09-5f26df90958d" name="Changes" comment="MyListener&#10;MyState &#10;added" />
       <created>1678636215082</created>
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
@@ -153,6 +149,7 @@
       <workItem from="1679681867979" duration="49000" />
       <workItem from="1682607024585" duration="5107000" />
       <workItem from="1683020446344" duration="12105000" />
+      <workItem from="1683370618596" duration="11049000" />
     </task>
     <task id="LOCAL-00001" summary="First commit">
       <created>1678636834719</created>
@@ -266,21 +263,6 @@
     <option name="version" value="3" />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
-    <option name="RECENT_FILTERS">
-      <map>
-        <entry key="Branch">
-          <value>
-            <list>
-              <RecentGroup>
-                <option name="FILTER_VALUES">
-                  <option value="master" />
-                </option>
-              </RecentGroup>
-            </list>
-          </value>
-        </entry>
-      </map>
-    </option>
     <option name="TAB_STATES">
       <map>
         <entry key="MAIN">
@@ -296,13 +278,28 @@
                   <entry key="branch">
                     <value>
                       <list>
-                        <option value="origin/MultiSnapShot-withLISTENER" />
+                        <option value="origin/master" />
                       </list>
                     </value>
                   </entry>
                 </map>
               </option>
             </State>
+          </value>
+        </entry>
+      </map>
+    </option>
+    <option name="RECENT_FILTERS">
+      <map>
+        <entry key="Branch">
+          <value>
+            <list>
+              <RecentGroup>
+                <option name="FILTER_VALUES">
+                  <option value="master" />
+                </option>
+              </RecentGroup>
+            </list>
           </value>
         </entry>
       </map>
Index: src/SnapshotLibrary/DistributedSnapshot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SnapshotLibrary;\r\n\r\nimport SnapshotLibrary.Messages.Marker;\r\n\r\nimport java.io.*;\r\nimport java.net.*;\r\nimport java.nio.file.Path;\r\nimport java.util.*;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.ScheduledExecutorService;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.atomic.AtomicBoolean;\r\n\r\n\r\n\r\nimport org.apache.commons.lang3.tuple.Pair;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n    * @author: Andreas Brummer\r\n    * @author: Francesco Caserta\r\n    * @date: 2023-03-16\r\n    * @version: 1.0\r\n    * @description: DistributedSnapshot class\r\n    * @note: This class is used to create a distributed snapshot of a distributed system.\r\n    * @note: The class is used to create a snapshot of the distributed system, and to store it in a file.\r\n    * @note: The class is also used to retrieve a snapshot from a file.\r\n    * @note: The class is also used to delete a snapshot from a file.\r\n    * @param: serverPortNumber: port number for the server\r\n    * @param: status: current status of the distributed system\r\n    * @param: server: server object\r\n    * @param: path: path to the directory where snapshots will be stored\r\n    * @param: input_nodes: list of SocketAddress of input nodes\r\n    * @param: snapshots: map of all snapshots currently in progress\r\n    * @param: output_nodes: map of all output nodes, using UUID as key and Socket object as value\r\n    * @param: output_stream: map of all output streams, using UUID as key and ObjectOutputStream object as value\r\n    * @param: SNAPSHOT_START_DELAY_MS: only for testing\r\n    * */\r\n\r\npublic class DistributedSnapshot{\r\n    private static final UUID UUID_NULL = new UUID(0L, 0L);\r\n    private MessageListener listener;\r\n    private State status;\r\n    private Server server;\r\n    private final Path path;\r\n    private final List<SocketAddress> inputNodes = new ArrayList<>();\r\n    private final Map<UUID,Snapshot> snapshots = new HashMap<>();\r\n    private final Map<UUID,Socket> outputNodes = new HashMap<>();\r\n    private final List<NodeConnection> nodeConnections = new ArrayList<>();\r\n\r\n    private final Map<UUID,ObjectOutputStream> outputStream = new HashMap<>();\r\n    private static final Log LOGGER = LogFactory.getLog(DistributedSnapshot.class);\r\n\r\n    private final Object messageLock = new Object();\r\n\r\n\r\n\r\n    /*  only for testing\r\n        delay (in milliseconds) before a snapshot is started */\r\n    static final int SNAPSHOT_START_DELAY_MS = 5000;\r\n\r\n    /*  only for testing */\r\n    static final boolean TEST_MODE = false;\r\n    //TODO capire il discorso delle cartella e dei file (es. se cartella è gia esistente)\r\n    public DistributedSnapshot(Path path) {\r\n        this.path = path;\r\n    }\r\n    public DistributedSnapshot(String folderName, MessageListener listener, State status) {\r\n        this.path = Storage.createFolder(folderName);\r\n        this.listener = listener;\r\n        this.status = status;\r\n    }\r\n    public DistributedSnapshot() {\r\n        this.path = Storage.createFolder(\"Snapshots\");\r\n    }\r\n\r\n\r\n    public boolean init(int serverPortNumber) throws IOException {\r\n            server = new Server();\r\n            server.start(serverPortNumber);\r\n            LOGGER.info(\"Server started.\");\r\n            return true;\r\n    }\r\n\r\n    // close server\r\n        public void end() throws IOException {\r\n            closeAllConnections();\r\n            server.stop();\r\n            LOGGER.info(\"Server stopped.\");\r\n        }\r\n\r\n    public  synchronized String installNewConnectionToNode(InetAddress ip, int port) throws IOException {\r\n\r\n        Socket socket = new Socket(ip, port);\r\n        UUID id = UUID.randomUUID();\r\n        for(Socket s : outputNodes.values()){\r\n            if(s.getInetAddress().equals(ip) && s.getPort() == port){\r\n                LOGGER.error(\"Connection already exists with: \" + ip + \" port: \" + port);\r\n                return null;\r\n            }\r\n        }\r\n        outputNodes.put(id, socket);\r\n        LOGGER.debug(\"added node with id: \" + id);\r\n        ObjectOutputStream objectOutput = new ObjectOutputStream(socket.getOutputStream());\r\n        outputStream.put(id, objectOutput);\r\n        return id.toString();\r\n    }\r\n\r\n    public synchronized void reconnectToNode(String nodeId,InetAddress ip, int port) throws IOException {\r\n        Socket socket = new Socket(ip, port);\r\n        UUID id = UUID.fromString(nodeId);\r\n        for(Socket s : outputNodes.values()){\r\n            if(s.getInetAddress().equals(ip) && s.getPort() == port){\r\n                LOGGER.error(\"Connection already exists with: \" + ip + \" port: \" + port);\r\n                return;\r\n            }\r\n        }\r\n        outputNodes.put(id, socket);\r\n        LOGGER.debug(\"added node with id: \" + id);\r\n        ObjectOutputStream objectOutput = new ObjectOutputStream(socket.getOutputStream());\r\n        outputStream.put(id, objectOutput);\r\n    }\r\n\r\n    public synchronized void closeConnection(String node_id) throws IOException {\r\n        UUID id = UUID.fromString(node_id);\r\n        Socket socket = outputNodes.get(id);\r\n        ObjectOutputStream objectOutput = outputStream.get(id);\r\n        objectOutput.close();\r\n        socket.close();\r\n        outputNodes.remove(id);\r\n        outputStream.remove(id);\r\n\r\n        LOGGER.info(\"Connection closed with: \" + socket.getInetAddress() + \" port: \" + socket.getPort());\r\n    }\r\n\r\n\r\n    private void closeAllConnections() {\r\n        ExecutorService executor = Executors.newFixedThreadPool(outputNodes.size());\r\n\r\n        for (UUID id : outputNodes.keySet()) {\r\n            executor.execute(() -> {\r\n                try {\r\n                    Socket socket = outputNodes.get(id);\r\n                    ObjectOutputStream objectOutput = outputStream.get(id);\r\n\r\n                    objectOutput.close();\r\n                    socket.close();\r\n                    outputNodes.remove(id);\r\n                    outputStream.remove(id);\r\n\r\n                    LOGGER.info(\"Connection closed with: \" + socket.getInetAddress() + \" port: \" + socket.getPort());\r\n                } catch (IOException e) {\r\n                    LOGGER.error(\"Error closing connection with id: \" + id, e);\r\n                }\r\n            });\r\n        }\r\n\r\n        executor.shutdown();\r\n        try {\r\n            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\r\n            LOGGER.info(\"All connections closed.\");\r\n        } catch (InterruptedException e) {\r\n            LOGGER.error(\"Interrupted while waiting for connection closing threads to finish\", e);\r\n            // Restore interrupted status\r\n            Thread.currentThread().interrupt();\r\n        }\r\n    }\r\n\r\n\r\n    public void sendMessage(String node_id, Object msg) throws IOException {\r\n        ObjectOutputStream objectOutput = outputStream.get(UUID.fromString(node_id));\r\n        try {\r\n            LOGGER.debug(\"Sending message to \" + node_id);\r\n            objectOutput.writeObject(msg);\r\n        } catch (IOException e) {\r\n            if (e instanceof java.io.EOFException || e instanceof java.net.SocketException) {\r\n                // Handle the case where the server closed the connection remotely\r\n                //outputNodes.remove(UUID.fromString(node_id));\r\n                LOGGER.error(\"Server closed the connection remotely.\");\r\n            } else {\r\n                // Handle other IOExceptions\r\n                LOGGER.error(\"Error sending message to \" + node_id, e);\r\n            }\r\n        } catch (NullPointerException e) {\r\n            LOGGER.error(\"Error sending message to \" + node_id+ \", invalid address.\");\r\n        }\r\n    }\r\n\r\n    public UUID startSnapshot() throws IOException {\r\n        UUID snapshotId = UUID.randomUUID();\r\n        Marker marker = new Marker(snapshotId);\r\n        // Copia lo stato di status in stateToStore (altrimenti finche non faccio lo store, se ricevo i messaggi viene modificato)\r\n        State stateToStore = status.copy();\r\n        snapshots.put(marker.getSnapshotId(), new Snapshot(marker.getSnapshotId(), stateToStore ,new ArrayList<>(inputNodes)));\r\n        LOGGER.debug(\"Starting snapshot \" + inputNodes);\r\n        LOGGER.debug(\"Snapshot id: \" + snapshotId);\r\n\r\n        // send marker to all nodes\r\n        for (ObjectOutputStream objectOutput : outputStream.values()) {\r\n            LOGGER.debug(\"Sending marker to \" + objectOutput);\r\n            objectOutput.writeObject(marker);\r\n        }\r\n        if(outputStream.size() == 0) {\r\n            LOGGER.debug(\"No nodes connected, ending snapshot.\");\r\n            endSnapshot(snapshots.get(snapshotId));\r\n        }\r\n        return snapshotId;\r\n    }\r\n\r\n    public void endSnapshot(Snapshot snapshot)  {\r\n        LOGGER.info(\"Snapshot \" + snapshot.getSnapshotId() + \" ended.\");\r\n        Storage.storeSnapshot(snapshot, path);\r\n        snapshots.remove(snapshot.getSnapshotId());\r\n        if(TEST_MODE) {\r\n            LOGGER.debug(\"Printing snapshot... \" );\r\n            LOGGER.debug(snapshot.toString());\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public static UUID getUuidNull(){\r\n        return UUID_NULL;\r\n    }\r\n\r\n    public void restoreSnapshot(UUID snapshotId) throws IOException, ClassNotFoundException, InterruptedException {\r\n        try {\r\n            //No snapshot found\r\n            if (snapshotId.equals(UUID_NULL)) {\r\n                LOGGER.info(\"Resetting to initial state (No snapshots found)\");\r\n                status.resetState();\r\n                Storage.deleteAllSnapshots(path); //svuota la cartella snapshot\r\n            }\r\n            //Snapshot already exists\r\n            else {\r\n                Snapshot snapshot = Storage.loadSnapshot(snapshotId, path);\r\n                Storage.deleteSnapshotsAfter(snapshotId, path); //cancella tutti gli snapshot successivi a quello restored\r\n                LOGGER.info(\"Restoring snapshot \" + snapshotId + \" ...\");\r\n                State new_state = snapshot.getStatus();\r\n                status.setState(new_state);\r\n                LOGGER.info(\"Restoring: State of the saved snapshot: \" + status.getState());\r\n                List<Pair<SocketAddress, Object>> nodeMessages = snapshot.getNodeMessages();\r\n                while (!snapshot.getNodeMessages().isEmpty()) {\r\n                    Pair<SocketAddress, Object> pair = nodeMessages.remove(0);\r\n                    listener.onMessageReceived(pair.getRight());\r\n                }\r\n                LOGGER.info(\"Restoring: State after the incoming messages in the snapshot: \" + status.getState());\r\n            }\r\n        }catch (NullPointerException e){\r\n            LOGGER.error(\"Error restoring snapshot \" + snapshotId + \" ...\", e);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n private class Server {\r\n     private ServerSocket serverSocket;\r\n     private Thread serverThread;\r\n     private AtomicBoolean running = new AtomicBoolean(false);\r\n     List<Thread> nodeHandlerThreads = new ArrayList<>();\r\n     public void start(int portNumber) throws IOException {\r\n         if (running.get()) {\r\n             LOGGER.warn(\"Server is already running.\");\r\n             return;\r\n         }\r\n         serverSocket = new ServerSocket(portNumber);\r\n         int port = serverSocket.getLocalPort();\r\n         LOGGER.info(\"Server started on port \" + port);\r\n         running.set(true);\r\n         serverThread = new Thread(() -> {\r\n             while (running.get()) {\r\n                 try {\r\n                     Socket socket = serverSocket.accept();\r\n                     inputNodes.add(socket.getRemoteSocketAddress());\r\n                     LOGGER.info(\"New connection established with: \" + socket.getInetAddress() + \" port:\" + socket.getPort());\r\n                     Thread nodeHandlerThread = new Thread(new NodeHandler(socket), \"NodeHandler-\"+Thread.activeCount());\r\n                     nodeHandlerThreads.add(nodeHandlerThread);\r\n                     nodeHandlerThread.start();\r\n                 } catch (SocketException e) {\r\n                     if (running.get()) {\r\n                         LOGGER.error(\"Error accepting client connection.\", e);\r\n                     }\r\n                 } catch (IOException e) {\r\n                     LOGGER.error(\"Error accepting client connection.\", e);\r\n                 }\r\n             }\r\n         });\r\n         serverThread.start();\r\n     }\r\n\r\n     public void stop() {\r\n         if (!running.get()) {\r\n             LOGGER.warn(\"Server is not running.\");\r\n             return;\r\n         }\r\n         running.set(false);\r\n         try {\r\n             serverSocket.close();\r\n             serverThread.interrupt();\r\n             for (Thread nodeHandlerThread : nodeHandlerThreads) {\r\n                 LOGGER.debug(\"Interrupting node handler thread: \" + nodeHandlerThread.getName());\r\n                 nodeHandlerThread.interrupt();\r\n                 LOGGER.debug(\"Interrupted node handler thread: \" + nodeHandlerThread.getName());\r\n                 nodeHandlerThread.join();\r\n                 LOGGER.debug(\"Joined node handler thread.\"+ nodeHandlerThread.getName()+ \"out of \" + nodeHandlerThreads.size() + \"threads\");\r\n             }\r\n             serverThread.join();\r\n             LOGGER.info(\"Server stopped.\");\r\n         } catch (IOException | InterruptedException e) {\r\n             LOGGER.error(\"Error stopping server.\", e);\r\n         }\r\n\r\n     }\r\n\r\n     public boolean isRunning() {\r\n         return running.get();\r\n     }\r\n\r\n     public int getPort() {\r\n         return serverSocket.getLocalPort();\r\n     }\r\n }\r\n\r\n\r\n\r\n\r\n\r\n    private class NodeHandler implements Runnable {\r\n        private final Socket clientSocket;\r\n        public NodeHandler(Socket socket) {\r\n            this.clientSocket = socket;\r\n        }\r\n\r\n\r\n        /* @description: handleMarker method\r\n         * @note: This method is used to handle a marker message.\r\n         */\r\n\r\n        private void handleMarker(Marker marker) throws IOException, InterruptedException {\r\n            UUID snapshotId = marker.getSnapshotId();\r\n            Snapshot snapshot;\r\n\r\n            if (snapshots.containsKey(snapshotId)) {\r\n                // Case: snapshot in progress\r\n                snapshot = snapshots.get(snapshotId);\r\n                LOGGER.debug(\"Snapshot \" + snapshotId + \" in progress.\");\r\n            } else {\r\n                // Case: starting snapshot\r\n                LOGGER.info(\"Starting snapshot \" + snapshotId);\r\n                State stateToStore = status.copy(); // Copia lo stato di status in stateToStore (altrimenti finche non faccio lo store, se ricevo i messaggi viene modificato)\r\n                snapshot = new Snapshot(snapshotId, stateToStore, new ArrayList<>(inputNodes));\r\n\r\n                snapshots.put(snapshotId, snapshot);\r\n\r\n                // Forward marker to all other nodes in the network\r\n                if (TEST_MODE) {\r\n                    // Wait before starting the snapshot\r\n                    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\r\n                    executor.schedule(() -> {\r\n                        // Forward marker to all other nodes in the network\r\n                        outputNodes.forEach((k, v) -> {\r\n                            try {\r\n                                outputStream.get(k).writeObject(marker);\r\n                            } catch (IOException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        });\r\n                    }, SNAPSHOT_START_DELAY_MS, TimeUnit.MILLISECONDS);\r\n                }\r\n                else {\r\n                    outputNodes.forEach((k, v) -> {\r\n                        try {\r\n                            outputStream.get(k).writeObject(marker);\r\n                        } catch (IOException e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            // If it was the last marker, end the snapshot\r\n            if (snapshot.removeFromNodeAddressList(clientSocket.getRemoteSocketAddress()))\r\n                endSnapshot(snapshot);\r\n        }\r\n\r\n\r\n\r\n\r\n        /* @description: handleMessage method\r\n         * @note: This method is used to handle a message.\r\n         */\r\n        private void handleMessage(Object message) {\r\n            if (snapshots.isEmpty()) {\r\n                // No snapshot in progress: do not save received messages\r\n                LOGGER.debug(\"Not saving received messages\");\r\n            } else {\r\n                // Snapshot in progress: save received messages\r\n                for (Snapshot snapshot : snapshots.values()) {\r\n                    LOGGER.debug(\"Saving received messages: \"+ message);\r\n                    //LOGGER.debug(snapshot.getConnectedNodes()); //only to test\r\n                    if (snapshot.getConnectedNodes().contains(clientSocket.getRemoteSocketAddress())) {\r\n                        snapshot.addNodeMessage(clientSocket.getRemoteSocketAddress(), message);\r\n                        LOGGER.debug(snapshot.getConnectedNodes().toString() + clientSocket.toString()+ message);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        private void handleEOFException(EOFException e) {\r\n            // Client closed connection\r\n            LOGGER.info(\"Client closed connection: \" + clientSocket.getRemoteSocketAddress());\r\n            // Remove client from input nodes\r\n            inputNodes.remove(clientSocket.getRemoteSocketAddress());\r\n        }\r\n        private void handleInterruptedException(InterruptedException e) {\r\n            // Thread interrupted\r\n            LOGGER.debug(\"Node handler thread interrupted.\");\r\n            Thread.currentThread().interrupt();\r\n        }\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                clientSocket.setSoTimeout(5000);\r\n                ObjectInputStream in = new ObjectInputStream(clientSocket.getInputStream());\r\n                Object inputObject;\r\n                    while ( !Thread.currentThread().isInterrupted()) {\r\n                            //LOGGER.debug(\"Waiting for a new message...\");\r\n                            try{\r\n                                inputObject = in.readObject();\r\n                            }catch (SocketTimeoutException e){\r\n                                //LOGGER.debug(\"Timeout\");\r\n                                continue;\r\n                            }\r\n                            //LOGGER.debug(\"Received a new message...\");\r\n                            if (inputObject != null) {\r\n                                synchronized (messageLock) {\r\n                                    /*Controllo se ho ricevuto un marker*/\r\n                                    if (inputObject instanceof Marker) {\r\n                                        LOGGER.debug(\"Received a new marker:\\n Id: \" + ((Marker) inputObject).getSnapshotId());\r\n                                        handleMarker((Marker) inputObject);\r\n                                    } else {\r\n                                        LOGGER.debug(\"Received a new message: \" + inputObject);\r\n                                        handleMessage(inputObject);\r\n                                        listener.onMessageReceived(inputObject);\r\n                                    }\r\n                                }\r\n                            }\r\n                    }\r\n            }\r\n            catch (EOFException e) {\r\n                handleEOFException(e);\r\n            } catch (InterruptedException e) {\r\n                handleInterruptedException(e);\r\n            } catch (IOException | ClassNotFoundException e) {\r\n                // Other I/O errors\r\n                if(clientSocket.isClosed())\r\n                    LOGGER.debug(\"Client closed connection: \" + clientSocket.getRemoteSocketAddress());\r\n                else\r\n                    LOGGER.error(\"Error handling client connection.\", e);\r\n                e.printStackTrace();\r\n            } finally {\r\n                // Socket closing\r\n                try {\r\n                    clientSocket.close();\r\n                    inputNodes.remove(clientSocket.getRemoteSocketAddress());\r\n                } catch (IOException e) {\r\n                    throw new RuntimeException(e);\r\n                }\r\n            }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/SnapshotLibrary/DistributedSnapshot.java b/src/SnapshotLibrary/DistributedSnapshot.java
--- a/src/SnapshotLibrary/DistributedSnapshot.java	(revision 83b590faeb6c8082017b643614ca6e4fc0989870)
+++ b/src/SnapshotLibrary/DistributedSnapshot.java	(date 1683475664636)
@@ -135,7 +135,6 @@
         socket.close();
         outputNodes.remove(id);
         outputStream.remove(id);
-
         LOGGER.info("Connection closed with: " + socket.getInetAddress() + " port: " + socket.getPort());
     }
 
